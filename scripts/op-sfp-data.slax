version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns str = "http://exslt.org/strings";
ns exsl extension = "http://exslt.org/common";

import "../import/junos.xsl";

/* @ISLOCAL = "false" */
/* @NAME = "SFP Event Script" */
/* @DESCRIPTION = "Write SFP Data to XML file" */

mvar $name;
mvar $counter = 1;
var $connection = jcs:open();

match / {
	<op-script-results> {
		/* abort if no connection to local mgd */
    if ($connection/..//xnm:error) {
			call rpc_failure($rpc = $connection/.., $message = "Error connecting on mgd on this RE");
			<xsl:message terminate="yes"> ;
    }

    /* check current RE is master RE. Stop execution if not */
    var $re_status = { call is_master(); }
    if ($re_status != "master") {
      <xsl:message terminate="yes"> "Script not running on master RE. Stopping execution";
    }
		/* get physical interface list */
		var $get-interface-information-rpc = <get-interface-information> {
			<terse>;
		};
		var $res-interfaces = jcs:execute( $connection , $get-interface-information-rpc );
		if ($res-interfaces/..//xnm:error) {
			call rpc_failure($rpc = $res-interfaces/.., $message = "Error collecting interface information");
			<xsl:message terminate="yes"> ;
		}

		/* Save data to XML file */
		var $filename = "/var/tmp/sfp-raw-data.xml";
		<exsl:document href=$filename indent="yes" method="xml" omit-xml-declaration="yes"> {
			<view-xml> {		
				/* get fpc list */
				var $cmd-fpc-list = <get-fpc-information>;
				var $res-cmd-fpc-list = jcs:execute( $connection , $cmd-fpc-list );
				if ($res-cmd-fpc-list/..//xnm:error) {
					call rpc_failure($rpc = $res-cmd-fpc-list/.., $message = "Error collecting fpc list");
					<xsl:message terminate="yes"> ;
				}
				/* each fpc */
				for-each ( $res-cmd-fpc-list/fpc/slot ) {
					/* reset counter */
					set $counter = 1;
					/* fpc name variable */
					var $fpc = "fpc" _ (.);
					/* get list of sfp  */
					var $cmd-pfe-fpc-rpc = <request-pfe-execute> {
						<target> $fpc;
						<command> "show sfp list";
					}
					var $res-cmd-pfe-fpc = jcs:execute( $connection , $cmd-pfe-fpc-rpc );

					/* break-down results */
					var $fpc-index-lines = jcs:break-lines( $res-cmd-pfe-fpc );
	
					/* create a complete command */
					var $complete-command = <request-pfe-execute> {
						<target> $fpc;
						/* avoid empty lines */
						if ( not(jcs:empty($fpc-index-lines)) ) {
							/* loop through show sfp list results line by line */
							for-each ($fpc-index-lines) {
								if ( position() > 4 ) {
									/* get sfp index */
									var $index = jcs:regex( "GOT:[[:blank:][:space:]]*([0-9]+)[[:blank:][:space:]]*MIC\\([0-9]/[0-9]\\)\\([0-9]\\)", (.) )[2];
									/* if sfp index is valid */
									if ( not(jcs:empty($index)) ) {
										/* get fpc/mic value */
										var $fpc-mic = jcs:regex( "GOT:[[:blank:][:space:]]*[0-9]+[[:blank:][:space:]]*MIC\\(([0-9]/[0-9])\\)\\(([0-9])\\)", (.) )[2];
										/* get pic value */
										var $pic = jcs:regex( "GOT:[[:blank:][:space:]]*[0-9]+[[:blank:][:space:]]*MIC\\(([0-9]/[0-9])\\)\\(([0-9])\\)", (.) )[3];
										/* create sfp command */
										<command> "show sfp " _ $index; 
									}
								}
							}
						}
					}
					/* collect all sfp data for each fpc */
					var $results = jcs:execute( $connection , $complete-command );

					/* split results based on SENT command */
					var $split-data = jcs:split( "SENT: Ukern command: " , $results);
	
					/* avoid empty lines */
					if ( not(jcs:empty($fpc-index-lines)) ) {
						/* loop through show sfp list results line by line */
						for-each ($fpc-index-lines) {
							if ( position() > 4 ) {
								/* get sfp index */
								var $index = jcs:regex( "GOT:[[:blank:][:space:]]*([0-9]+)[[:blank:][:space:]]*MIC\\([0-9]/[0-9]\\)\\([0-9]\\)", (.) )[2];
								/* if sfp index is valid */
								if ( not(jcs:empty($index)) ) {
									/* increase counter */
									set $counter = $counter + 1;
									/* Seach for the fpc-mic-pic */
									var $fpc-mic = jcs:regex( "GOT:[[:blank:][:space:]]*[0-9]+[[:blank:][:space:]]*MIC\\(([0-9]/[0-9])\\)\\(([0-9])\\)", (.) )[2];
									var $pic = jcs:regex( "GOT:[[:blank:][:space:]]*[0-9]+[[:blank:][:space:]]*MIC\\(([0-9]/[0-9])\\)\\(([0-9])\\)", (.) )[3];

									<interface> {
										/* find a match in the list of physical interfaces */
										var $search-if = $fpc-mic _ "\/" _ $pic;
										var $pifname = $res-interfaces/physical-interface[(name="ge-"_$search-if) or (name="xe-"_$search-if)]/name;
										/* physical interface name - will be used by configuration view */
										<name> {
											expr $pifname;
										}
										/* fpc slot */
										<fpc> {
											expr $fpc;
										}
										/* sfp index */
										<index> {
											expr $index;
										}
										/* sfp data values */
										<sfp-stats> {
											/* data starts at [2], use counter to simplify this 		*/
											/* the raw data $split-data[$counter] must be processed */
											var $spf-raw-data-lines = jcs:break-lines( $split-data[$counter] );
											/* link state */
											<linkstate> {
												expr substring-after( $spf-raw-data-lines[13] , " Linkstate: ");
											}
											/* cable type */
											<cable-type> {
												expr substring-after( $spf-raw-data-lines[25] , "Cable Type:          ");
											}
											/* transceiver code */
											<sfp-xcvr-code> {
												expr substring-after( $spf-raw-data-lines[26] , "SFP xcvr codes:      ");
											}
											/* part number */
											<sfp-pno> {
												expr substring-after( $spf-raw-data-lines[27] , "PNO:                 ");
											}
											/* serial number */
											<sfp-sno> {
												expr substring-after( $spf-raw-data-lines[28] , "SNO:                 ");
											}
											/* revision */
											<sfp-rev> {
												expr substring-after( $spf-raw-data-lines[29] , "REV:                 ");
											}
											/* vendor name */
											<sfp-vendor-name> {
												expr substring-after( $spf-raw-data-lines[30] , "Vendor name:         ");
											}
											/* vendor part number */
											<sfp-vendor-pno> {
												expr substring-after( $spf-raw-data-lines[31] , "Vendor PNO:          ");
											}
											/* vendor revision */
											<sfp-vendor-rev> {
												expr substring-after( $spf-raw-data-lines[32] , "Vendor REV:          ");
											}
											/* ID */
											<sfp-id> {
												expr substring-after( $spf-raw-data-lines[34] , "ID:                  ");
											}
											/* extended id */
											<sfp-extended-id> {
												expr substring-after( $spf-raw-data-lines[35] , "Extended ID:         ");
											}
											/* connector type */
											<sfp-connector-type> {
												expr substring-after( $spf-raw-data-lines[36] , "Connector type:      ");
											}
											/* transceiver type */
											<sfp-xcvr-type> {
												expr substring-after( $spf-raw-data-lines[37] , "Transceiver type:    ");
											}
											/* sff-8472 compliance */
											<sfp-sff-8472> {
												expr substring-after( $spf-raw-data-lines[38] , "SFF-8472 compliance: ");
											}
											/* wavelength */
											<sfp-wavelength> {
												expr substring-after( $spf-raw-data-lines[39] , "Wavelength           ");
											}
											/* fibre mode */
											<sfp-fibre-mode> {
												expr substring-after( $spf-raw-data-lines[40] , "Fiber mode           ");
											}
											/* Manufacturing Date YY-MM-DD */
											<sfp-manuf-date> {
											    var $y1 = substring( $spf-raw-data-lines[49] , 30 , 2 );
											    var $y2 = substring( $spf-raw-data-lines[49] , 33 , 2 );
											    var $year = $y1 - 30  _ $y2 - 30;
											    var $m1 = substring( $spf-raw-data-lines[49] , 36 , 2 );
											    var $m2 = substring( $spf-raw-data-lines[49] , 39 , 2 );
											    var $month = $m1 - 30  _ $m2 - 30;
											    var $d1 = substring( $spf-raw-data-lines[49] , 44 , 2 );
											    var $d2 =substring( $spf-raw-data-lines[49] , 47 , 2 );
											    var $day = $d1 - 30  _ $d2 - 30;
											    expr $year _ "-" _ $month _ "-" _ $day;
											}
											/* Bit Rate */
											<sfp-bit-rate> {
												/* Value needs to be converted from hex to dec, then muliply by 100 MBd */
												/* manual hex to dec conversion - printf did not convert? */
												var $bitrate = call hex_to_dec( $bit1 = substring( $spf-raw-data-lines[44] , 58 , 1 ) ,  $bit2 = substring( $spf-raw-data-lines[44] , 59 , 1 ) );
												expr $bitrate * 100 _ " MBd";
											}
											/* Link Length */
											/* SMF 1km */
											<sfp-link-length-smf-1k> {
												var $smfkm = call hex_to_dec( $bit1 = substring( $spf-raw-data-lines[44] , 64 , 1 ) ,  $bit2 = substring( $spf-raw-data-lines[44] , 65 , 1 ) );
												expr $smfkm _ " km";
											}
											/* SMF 100m */
											<sfp-link-length-smf-100m> {
												var $smfm = call hex_to_dec( $bit1 = substring( $spf-raw-data-lines[44] , 67 , 1 ) ,  $bit2 = substring( $spf-raw-data-lines[44] , 68 , 1 ) );
												expr $smfm * 100 _ " m";
											}
											/* MM OM1 62.5micron 10m */
											<sfp-link-length-mmf-om1> {
												var $om1 = call hex_to_dec( $bit1 = substring( $spf-raw-data-lines[45] , 19 , 1 ) ,  $bit2 = substring( $spf-raw-data-lines[45] , 20 , 1 ) );
												expr $om1 * 10 _ " m";
											}
											/* MM OM2 50micron 10m */
											<sfp-link-length-mmf-om2> {
												var $om2 = call hex_to_dec( $bit1 = substring( $spf-raw-data-lines[45] , 16 , 1 ) ,  $bit2 = substring( $spf-raw-data-lines[45] , 17 , 1 ) );
												expr $om2 * 10 _ " m";
											}
											/* MM OM3 50micron 10m */
											<sfp-link-length-mmf-om3> {
												var $om3 = call hex_to_dec( $bit1 = substring( $spf-raw-data-lines[45] , 25 , 1 ) ,  $bit2 = substring( $spf-raw-data-lines[45] , 26 , 1 ) );
												expr $om3 * 10 _ " m";
											}
											/* Copper-Direct 1m */
											<sfp-link-length-direct> {
												var $direct = call hex_to_dec( $bit1 = substring( $spf-raw-data-lines[45] , 22 , 1 ) ,  $bit2 = substring( $spf-raw-data-lines[45] , 23 , 1 ) );
												expr $direct _ " m";
											}
										}
									}
								}
							}
						}
					}
				} /* end of fpc slot */
			}
		}
		var $close-connection = jcs:close( $connection );
	}
}

template hex_to_dec( $bit1 , $bit2 ) {
	var $dec1 = {
		if ($bit1 == "a") {
			expr "10";
		}
		else if ($bit1 == "b") {
			expr "11";
		}
		else if ($bit1 == "c") {
			expr "12";
		}
		else if ($bit1 == "d") {
			expr "13";
		}
		else if ($bit1 == "e") {
			expr "14";
		}
		else if ($bit1 == "f") {
			expr "15";
		}
		else {
			expr $bit1;
		}
	}
	var $dec2 = {
		if ($bit2 == "a") {
			expr "10";
		}
		else if ($bit2 == "b") {
			expr "11";
		}
		else if ($bit2 == "c") {
			expr "12";
		}
		else if ($bit2 == "d") {
			expr "13";
		}
		else if ($bit2 == "e") {
			expr "14";
		}
		else if ($bit2 == "f") {
			expr "15";
		}
		else {
			expr $bit2;
		}
	}
	expr (( 16 * $dec1) + (1 * $dec2));
}

template is_master() {
  if ( event-script-input/junos-context ) {
    if ( event-script-input/junos-context/re-master ) {
      <output> "master";
    }
    else {
      <output> "backup";
    }
  }
  else if ( commit-script-input/junos-context ) {
    if ( commit-script-input/junos-context/re-master ) {
      <output> "master";
    }
    else {
      <output> "backup";
    }
  }
  else if ( op-script-input/junos-context ) {
    if ( op-script-input/junos-context/re-master ) {
      <output> "master";
    }
    else {
      <output> "backup";
    }
  }
  else {
    var $re_rpc = <get-route-engine-information> ;
    var $re = jcs:execute($connection, $re_rpc);
    if ($re/..//xnm:error) {
      call rpc_failure($rpc = $re/.., $message = "Error communicating to determine if master");
      <xsl:message terminate="yes"> ;
    }

    /* if there is only one RE then is has to be master */
    if ( $re/route-engine ) {
      if ( count( $re/route-engine ) == 1 ) {
        <output> "master";
      }
      /* if there is more than one RE this XPath statement is only true on the master RE */
      else if ( $re/route-engine[mastership-state == "master"]/load-average-one ) {
        <output> "master";
      }
      else {
        <output> "backup";
      }
    }
    else {
      var $xml = { copy-of $re; }
      <xsl:message terminate="yes"> "ERROR: Unexpected response: " _ $xml;
    }
  }
}

template rpc_failure($rpc, $message = "Following errors occurred while trying to gather data: ") {
	expr jcs:syslog("daemon.error", $message);
	for-each ($rpc//xnm:error) {
		expr jcs:syslog("daemon.error", message);
	}
}
